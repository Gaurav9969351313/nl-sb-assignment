name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Copy JAR to artifacts
        run: |
          mkdir -p artifacts
          cp target/*.jar artifacts/app.jar
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: artifacts/app.jar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: artifacts
      - name: Run tests (PMD, Newman)
        run: mvn verify -Dpmd.skip=true -Dnewman.skip=true
      - name: Copy test reports
        run: |
          mkdir -p test-reports
          cp -r target/site test-reports/
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-reports/

  image_build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: artifacts
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set version
        id: version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
          else
            VERSION=0.0.1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Build Docker image
        run: |
          mkdir -p jar && cp artifacts/app.jar jar/app.jar
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} .
        env:
          DOCKER_IMAGE: gauravtalele32/nl-sb-assignement

  image_publish:
    runs-on: ubuntu-latest
    needs: image_build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set version
        id: version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
          else
            VERSION=0.1.0
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image
        run: |
          docker tag gauravtalele32/nl-sb-assignement:${{ steps.version.outputs.version }} gauravtalele32/nl-sb-assignement:latest
          docker push gauravtalele32/nl-sb-assignement:${{ steps.version.outputs.version }}
          docker push gauravtalele32/nl-sb-assignement:latest
      - name: Create Git tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v${{ steps.version.outputs.version }} -m "Release version ${{ steps.version.outputs.version }}"
          git push origin v${{ steps.version.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: image_publish
    steps:
      - uses: actions/checkout@v4
      - name: Set version
        id: version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
          else
            VERSION=0.1.0
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Install Render CLI
        run: npm install -g @render/render-cli
      - name: Login to Render
        run: render login --api-key ${{ secrets.RENDER_API_KEY }}
      - name: Deploy to Render.com
        run: |
          SERVICE_ID=$(render services list --json | jq -r '.[] | select(.name=="nl-sb-assignement") | .id')
          if [ -n "$SERVICE_ID" ]; then render services delete "$SERVICE_ID" --yes; fi
          render services create \
            --type web \
            --name nl-sb-assignement \
            --env docker \
            --docker-image docker.io/gauravtalele32/nl-sb-assignement:${{ steps.version.outputs.version }} \
            --plan free
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
