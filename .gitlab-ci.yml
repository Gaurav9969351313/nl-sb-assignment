stages:
  - build
  - test
  - image_build
  - image_publish
  - deploy

variables:
  APP_NAME: nl-sb-assignement
  DOCKER_IMAGE: gauravtalele32/nl-sb-assignement
  VERSION_FILE: version.txt
  RENDER_API_URL: "https://api.render.com/v1/services/YOUR_SERVICE_ID/deploys"

build:
  stage: build
  image: maven:3.8.6-jdk-17
  script:
    - mvn clean package -DskipTests
    - mkdir -p artifacts
    - cp target/*.jar artifacts/app.jar
  artifacts:
    paths:
      - artifacts/app.jar
  only:
    - main

# üß™ Run tests (PMD, Newman)
test:
  stage: test
  image: maven:3.8.6-jdk-17
  dependencies:
    - build
  script:
    - mvn verify -Dpmd.skip=false -Dnewman.skip=false
    - mkdir -p test-reports
    - cp -r target/site test-reports/
  artifacts:
    paths:
      - test-reports/
  only:
    - main

# üõ†Ô∏è Build Docker image from JAR
image_build:
  stage: image_build
  image: docker:20.10.7
  services:
    - docker:19.03.12-dind
  dependencies:
    - build
  script:
    - export VERSION=$(cat $VERSION_FILE || echo "0.1.0")
    - echo "Building version: $VERSION"
    - mkdir -p jar && cp artifacts/app.jar jar/app.jar
    - docker build -t $DOCKER_IMAGE:$VERSION .
  artifacts:
    paths:
      - VERSION_FILE
  only:
    - main

# üì¶ Push Docker image to Docker Hub with version tag
image_publish:
  stage: image_publish
  image: docker:20.10.7
  services:
    - docker:19.03.12-dind
  before_script:
    - export VERSION=$(cat $VERSION_FILE)
  script:
    - docker login -u "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD" 
    - docker tag $DOCKER_IMAGE:$VERSION $DOCKER_IMAGE:latest
    - docker push $DOCKER_IMAGE:$VERSION
    - docker push $DOCKER_IMAGE:latest
    - git tag -a "v$VERSION" -m "Release version $VERSION"
    - git push origin "v$VERSION"
  only:
    - main
  dependencies:
    - image_build

# üöÄ Deploy to Render.com
deploy:
  stage: deploy
  image: node:18 # required for installing Render CLI
  before_script:
    - export VERSION=$(cat $VERSION_FILE)
  script:
    - npm install -g @render/render-cli
    - render login --api-key $RENDER_API_KEY
    - SERVICE_ID=$(render services list --json | jq -r '.[] | select(.name=="$APP_NAME") | .id')
    - if [ -n "$SERVICE_ID" ]; then render services delete "$SERVICE_ID" --yes; fi
    - render services create \
        --type web \
        --name $APP_NAME \
        --env docker \
        --docker-image docker.io/gauravtalele32/$DOCKER_IMAGE:$VERSION \
        --plan free
    # - render blueprint deploy --yes
  only:
    - main
  dependencies:
    - image_publish
